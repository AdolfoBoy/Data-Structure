#pragma once
#include <iostream>
#include <queue>
#include <stack>
#include <assert.h>
using namespace std;

template<class T>
struct BinaryTreeNode
{
	T _data;
	BinaryTreeNode<T>* _left;
	BinaryTreeNode<T>* _right;
	BinaryTreeNode(const T& x)
		:_data(x)
		,_left(NULL)
		,_right(NULL)
	{
	}
};

template<class T>
class BinaryTree
{
	typedef BinaryTreeNode<T> Node;
public:
	BinaryTree()
		:_root(NULL)
	{
	}
	//根据前序序列建立二叉树
	BinaryTree(T* _array,size_t size,const T& _invalid)
	{
		size_t index=0;
		_root=_CreateBinaryTree(_array,size,index,_invalid);
	}

	BinaryTree(const BinaryTree<T>& t)
	{
		_root=_CopyBinaryTree(t._root);
	}

	BinaryTree<T>& operator=(BinaryTree<T> t)
	{
		swap(_root,t._root);
		return *this;
	}

	~BinaryTree()
	{
		_DestroyBinaryTree(_root);
	}

	//前序遍历(递归）
	void PrevOrder()
	{
		_PrevOrder(_root);
		cout<<endl;
	}

	//中序遍历（递归）
	void InOrder()
	{
		_InOrder(_root);
		cout<<endl;
	}

	//后序遍历（递归）
	void PostOrder()
	{
		_PostOrder(_root);
		cout<<endl;
	}

	//层序遍历，队列实现
	void LevelOrder()
	{
		_LevelOrder(_root);
		cout<<endl;
	}

	//前序遍历（非递归）
	void PrevOrder_NonR()
	{
		_PrevOrder_NonR(_root);
		cout<<endl;
	}

	//中序遍历（非递归）
	void InOrder_NonR()
	{
		_InOrder_NonR(_root);
		cout<<endl;
	}

	//后序遍历（非递归）
	void PostOrder_NonR()
	{
		_PostOrder_NonR(_root);
		cout<<endl;
	}

	//求二叉树节点个数
	size_t size()
	{
		return _size(_root);
	}

	//求二叉树高度
	size_t depth()
	{
		return _depth(_root);
	}
	
	//求二叉树叶子节点个数
	size_t  LeafSize()
	{
		return _LeafSize(_root);
	}

	//二叉树第K层节点个数
	size_t GetKLevel(int k)
	{
		size_t size = 0;
		size_t level = 1;
		_GetKLevel(_root,level, k, size);
		return size;
	}

	//查找二叉树结点
	Node* Find(const T& x)
	{
		return _Find(_root,x);
	}
protected:
	Node* _CreateBinaryTree(T* _array,size_t size,size_t& index,const T& _invalid)
	{
		Node* root=NULL;  
		if(index <size && _array[index] != _invalid)
		{
			root=new Node(_array[index]);
			root->_left=_CreateBinaryTree(_array,size,++index,_invalid);
			//++index;
			root->_right=_CreateBinaryTree(_array,size,++index,_invalid);
		}
		return root;
	}

	void _PrevOrder(Node* root)
	{
		if(root == NULL)
			return;
		cout<<root->_data<<" ";
		_PrevOrder(root->_left);
		_PrevOrder(root->_right);
	}

	void _InOrder(Node* root)
	{
		if(root == NULL)
			return;
		_InOrder(root->_left);
		cout<<root->_data<<" ";
		_InOrder(root->_right);
	}

	void _PostOrder(Node* root)
	{
		if(root == NULL)
			return;
		_PostOrder(root->_left);
		_PostOrder(root->_right);
		cout<<root->_data<<" ";
	}

	void _LevelOrder(Node* root)
	{
		Node* cur=root;
		queue<Node*> q;  //模板类型为Node*,队列存放指针
		if(cur)
			q.push(cur);
		while(!q.empty())
		{
			Node* _front=q.front();
			q.pop();
			cout<<_front->_data<<" ";
			if(_front->_left)
				q.push(_front->_left);
			if(_front->_right)
				q.push(_front->_right);
		}
	}

	void _PrevOrder_NonR(Node* root)
	{
		Node* cur=root;
		stack<Node*> s;
		while(!s.empty() || cur)
		{
			while(cur)
			{
				s.push(cur);
				cout<<cur->_data<<" ";
				cur=cur->_left;
			}
			Node* _top=s.top();
			s.pop();
			cur=_top->_right;
		}
	}

	void _InOrder_NonR(Node* root)
	{
		Node* cur=root;
		stack<Node*> s;
		while(!s.empty() || cur)
		{
			while(cur)
			{
				s.push(cur);
				cur=cur->_left;
			}
			Node* _top=s.top();
			s.pop();
			cout<<_top->_data<<" ";
			cur=_top->_right;
		}
	}

	void _PostOrder_NonR(Node* root)
	{
		Node* cur=root;
		Node* prev=NULL;
		stack<Node*> s;
		while(!s.empty() || cur)
		{
			while(cur)
			{
				s.push(cur);
				cur=cur->_left;
			}
			Node* _top=s.top();
			if(_top->_right == prev || _top->_right == NULL)
			{
				cout<<_top->_data<<" ";
				prev=_top;
				s.pop();
			}
			else
				cur=_top->_right;
		}
	}

	Node* _Find(Node* root,const T& x) 
	{
		Node* ret=NULL;
		if(root == NULL)
			return NULL;
		if(root->_data == x)
			return root;
		ret=_Find(root->_left,x);
		if(ret != NULL)
			return ret;
		return _Find(root->_right, x);
	}

	size_t _size(Node* root)
	{
		size_t count=0;
		if(root == NULL)
			return 0;
		count++;
		count+=_size(root->_left);
		count+=_size(root->_right);
	}

	size_t _LeafSize(Node* root)
	{
		if(root == NULL)
			return 0;
		if(root->_left == NULL && root->_right == NULL)
			return 1;
		return _LeafSize(root->_left)+_LeafSize(root->_right);
	}

	size_t depth(Node* root)
	{ 
		if (root == NULL)
		{
			return 0;
		}

		int left = _Depth(root->_left)+1;
		int right = _Depth(root->_right)+1;

		return left > right ? left : right;
	}

	void _GetKLevel(Node* root, size_t level, size_t k,
		size_t& size)
	{
		if (root == NULL)
		{
			return;
		}

		if (k == level)
		{
			++size;
			return;
		}

		_GetKLevel(root->_left, level+1, k, size);
		_GetKLevel(root->_right, level+1, k, size);
	}
protected:
	Node* _CopyBinaryTree(Node* root)
	{
		if(root == NULL)
			return NULL;
		Node* new_root=new Node(root->_data);
		new_root->_left=_CopyBinaryTree(root->_left);
		new_root->_right=_CopyBinaryTree(root->_right);
		return new_root;
	}

	void _DestroyBinaryTree(Node* root)
	{
		if(root == NULL)
			return;
		_DestroyBinaryTree(root->_left);
		_DestroyBinaryTree(root->_right);
		delete root;
		root=NULL;
	}
private:
	Node* _root;
};
